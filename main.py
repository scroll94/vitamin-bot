import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import os

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –°–û–ó–î–ê–Å–ú FLASK ===
app = Flask(__name__)

# === –¢–û–ö–ï–ù –ë–û–¢–ê ===
TOKEN = os.getenv("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê")

# === –°–û–ó–î–ê–Å–ú TELEGRAM APPLICATION ===
application = Application.builder().token(TOKEN).build()


# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ Flask webhook üòé")


application.add_handler(CommandHandler("start", start))


# === –í–ï–ë–•–£–ö –î–õ–Ø TELEGRAM ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ application"""
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        asyncio.run(application.process_update(update))  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return "ok", 200


# === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===
@app.route("/")
def home():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!"


# === –ó–ê–ü–£–°–ö FLASK ===
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    asyncio.run(application.bot.set_webhook(url=WEBHOOK_URL))

    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
